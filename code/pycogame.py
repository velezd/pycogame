from micropython import const
from machine import SPI, Pin, PWM
from utime import ticks_ms, ticks_diff, sleep_ms
from math import ceil, floor
import ustruct


# Clock ########################################################################
class Clock():
    """ Class for working with timing and framerates """
    def __init__(self, framerate=30):
        """ Initialize clock

        :param framerate: Target FPS, defaults to 30
        :type framerate: int, optional
        """
        self._frame_ms = 1000 / framerate
        self._last_tick = ticks_ms()
        self._ticks = [0,0,0,0,0,0,0,0,0,0]
        
    def tick(self):
        """ Update the clock
        
        This method should be called once per frame. It will compute how many 
        milliseconds have passed since the previous call, and delay the 
        execution of the program to not exceed target FPS.

        :return: Time in ms since last call of tick
        :rtype: int
        """
        diff = ticks_diff(ticks_ms(), self._last_tick)
        idle = 0
        if diff < self._frame_ms:
            idle = int(self._frame_ms - diff)
            sleep_ms(idle)
        self._ticks.pop(0)
        self._ticks.append(diff + idle)
        self._last_tick = ticks_ms()
        return diff + idle

    def get_fps(self):
        """ Compute the framerate

        :return: Number of FPS calculated from last 10 ticks.
        :rtype: int
        """
        return int(10000 / sum(self._ticks))

    def sleep(self, sec):
        """ Pause execution

        :param sec: Number of seconds
        :type sec: int/float
        """
        sleep_ms(int(sec*1000))

# Input ########################################################################
class Input():
    """ Class for reading button imputs """
    def __init__(self, up=8, down=6, left=9, right=7, menu=5, a=4, b=3):
        """ Initialize input class

        :param up: Pin number, defaults to 8
        :type up: int, optional
        :param down: Pin number, defaults to 6
        :type down: int, optional
        :param left: Pin number, defaults to 7
        :type left: int, optional
        :param right: Pin number, defaults to 9
        :type right: int, optional
        :param menu: Pin number, defaults to 5
        :type menu: int, optional
        :param a: Pin number, defaults to 4
        :type a: int, optional
        :param b: Pin number, defaults to 3
        :type b: int, optional
        """        
        # Initialize input pins
        self._up = Pin(up, Pin.IN, Pin.PULL_DOWN)
        self._down = Pin(down, Pin.IN, Pin.PULL_DOWN)
        self._left = Pin(left, Pin.IN, Pin.PULL_DOWN)
        self._right = Pin(right, Pin.IN, Pin.PULL_DOWN)
        self._menu = Pin(menu, Pin.IN, Pin.PULL_DOWN)
        self._a = Pin(a, Pin.IN, Pin.PULL_DOWN)
        self._b = Pin(b, Pin.IN, Pin.PULL_DOWN)
        # Debouncing variables
        self._deb = [0,0,0,0,0,0,0]
        self._deb_time = 50
        # Input values
        self.up_pressed = False
        self.down_pressed = False
        self.left_pressed = False
        self.right_pressed = False
        self.menu_pressed = False
        self.a_pressed = False
        self.b_pressed = False
        self.up_released = False
        self.down_released = False
        self.left_released = False
        self.right_released = False
        self.menu_released = False
        self.a_released = False
        self.b_released = False
        self.up_on = False
        self.down_on = False
        self.left_on = False
        self.right_on = False
        self.menu_on = False
        self.a_on = False
        self.b_on = False

    def get_inputs(self, dt):
        """ Read input pins values 

        :param dt: Time between get_input calls in ms
        :type dt: int
        """
        up_on = bool(self._up.value())
        if up_on != self.up_on and self._deb[0] <= 0:
            self._deb[0] = self._deb_time
            if up_on:
                self.up_pressed = True
                self.up_released = False
            else:
                self.up_released = True
                self.up_pressed = False
        else:
            self.up_pressed = False
            self.up_released = False
        self.up_on = up_on

        down_on = bool(self._down.value())
        if down_on != self.down_on and self._deb[1] <= 0:
            self._deb[1] = self._deb_time
            if down_on:
                self.down_pressed = True
                self.down_released = False
            else:
                self.down_released = True
                self.down_pressed = False
        else:
            self.down_pressed = False
            self.down_released = False
        self.down_on = down_on

        left_on = bool(self._left.value())
        if left_on != self.left_on and self._deb[2] <= 0:
            self._deb[2] = self._deb_time
            if left_on:
                self.left_pressed = True
                self.left_released = False
            else:
                self.left_released = True
                self.left_pressed = False
        else:
            self.left_pressed = False
            self.left_released = False
        self.left_on = left_on

        right_on = bool(self._right.value())
        if right_on != self.right_on and self._deb[3] <= 0:
            self._deb[3] = self._deb_time
            if right_on:
                self.right_pressed = True
                self.right_released = False
            else:
                self.right_released = True
                self.right_pressed = False
        else:
            self.right_pressed = False
            self.right_released = False
        self.right_on = right_on

        menu_on = bool(self._menu.value())
        if menu_on != self.menu_on and self._deb[4] <= 0:
            self._deb[4] = self._deb_time
            if menu_on:
                self.menu_pressed = True
                self.menu_released = False
            else:
                self.menu_released = True
                self.menu_pressed = False
        else:
            self.menu_pressed = False
            self.menu_released = False
        self.menu_on = menu_on

        a_on = bool(self._a.value())
        if a_on != self.a_on and self._deb[5] <= 0:
            self._deb[5] = self._deb_time
            if a_on:
                self.a_pressed = True
                self.a_released = False
            else:
                self.a_released = True
                self.a_pressed = False
        else:
            self.a_pressed = False
            self.a_released = False
        self.a_on = a_on

        b_on = bool(self._b.value())
        if b_on != self.b_on and self._deb[5] <= 0:
            self._deb[6] = self._deb_time
            if b_on:
                self.b_pressed = True
                self.b_released = False
            else: 
                self.b_released = True
                self.b_pressed = False
        else:
            self.b_pressed = False
            self.b_released = False
        self.b_on = b_on

        # Decrement debounce timers
        deb = []
        for t in self._deb:
            if t > 0:
                deb.append(t-dt)
                continue
            deb.append(t)
        self._deb = deb


# Sound ########################################################################
class Sound():
    """ Class for playing sound efects and music """
    def __init__(self, speaker_pin1=20, speaker_pin2=22):
        """ Initialize sound class

        :param speaker_pin1: Number of the pin connected to speaker, defaults to 20
        :type speaker_pin1: int, optional
        :param speaker_pin2: Number of the pin connected to speaker, defaults to 22
        :type speaker_pin2: int, optional
        """
        self._spkr_s = PWM(Pin(speaker_pin1))
        self._spkr_e = PWM(Pin(speaker_pin2))
        try:
            with open('/vol') as fo:
                self.vol = int(fo.read())
        except:
            self.vol = 32000
        self._spkr_s.duty_u16(0)
        self._spkr_e.duty_u16(0)
        self.bufs = []
        self.bufe = []
        self._ds = 0
        self._de = 0
        self.note_sep = False

    def update(self, dt):
        """ Plays sounds from buffers - call every frame 

        :param dt: Time between update calls in ms
        :type dt: int
        """        
        self._ds = self._ch_update(self.bufs, self._ds, self._spkr_s, dt, True)
        self._de = self._ch_update(self.bufe, self._de, self._spkr_e, dt)

    def _ch_update(self, buf, d, spkr, dt, sep=False):
        """ Plays sounds from buffer

        :param buf: Buffer
        :type buf: list
        :param d: Sound durration
        :type d: int
        :param spkr: Speaker PWM Pin
        :type spkr: Class PWM
        :param dt: Time between calls in ms
        :type dt: int
        :return: Sound durration left
        :rtype: int
        """
        # if sound is playing - Decrement sound duration
        if d > 0:
            return d - dt
        if len(buf) != 0:
            # handle separation between notes
            if sep and self.note_sep:
                freq = 0
                ms = 1
                self.note_sep = False
            else:
                # play sound from buffer
                freq, ms = buf.pop(0)
            # Check for minimal frequency
            if freq > 9:
                spkr.freq(freq)
                spkr.duty_u16(self.vol)
                if sep:
                    self.note_sep = True
            else:
                spkr.duty_u16(0)
            # Return new sound duration
            return ms
        # Stop sound if buffer is empty and duration < 0
        spkr.duty_u16(0)
        return 0

    def play_song(self, song):
        """ Add song at the end of song buffer

        :param song: Song data [(frequency, durration), ...]
        :type song: list
        """
        # Add song data at the end of buffer
        self.bufs.extend(song)

    def song_playing(self):
        """ Check if song is playing

        :return: True if song is playing, else False
        :rtype: bool
        """
        if len(self.bufs) == 0 and self._ds <= 0:
            return False
        return True

    def play_effect(self, effect):
        """ Add effect at the start of effect buffer - replaces current effect

        :param effect: Effect data [(frequency, durration), ...]
        :type effect: list
        """
        # Remove items from buffer corresponding to the duration of the effect
        lenght = effect[0]
        bf_replace = 0
        while lenght > bf_replace:
            if len(self.bufe) == 0:
                break
            bf_replace += self.bufe.pop(0)[1]
        # Add effect at the front of the buffer
        self.bufe = effect[1] + self.bufe
        # End current sound
        self._de = 0

    @classmethod
    def load_song(cls, rtttl_str):
        return RTTTL(rtttl_str).load()

    def stop_song(self):
        """ Clear song buffer and stop playing current sound """
        self.bufs = []
        self._ds = 0

    def stop_effect(self):
        """ Clear effect buffer and stop playing current sound """
        self.bufe = []
        self._de = 0

    def cleanup(self):
        """ Deinitialize sound """
        self.stop_song()
        self.stop_effect()
        self._spkr_s.deinit()
        self._spkr_e.deinit()

    def on(self):
        self.vol = 32000
        self._save_vol()

    def off(self):
        self.vol = 0
        self._save_vol()
    
    def _save_vol(self):
        """ Save state to flash """
        with open('/vol', 'w') as fo:
            fo.write(str(self.vol))


class RTTTL():
    # You can find a description of RTTTL here: https://en.wikipedia.org/wiki/Ring_Tone_Transfer_Language
    NOTE = [
        440.0,	# A
        493.9,	# B or H
        261.6,	# C
        293.7,	# D
        329.6,	# E
        349.2,  # F
        392.0,	# G
        0.0,    # pad
        466.2,	# A#
        0.0,
        277.2,	# C#
        311.1,	# D#
        0.0,
        370.0,	# F#
        415.3,	# G#
        0.0,
    ]

    def __init__(self, tune):
        tune_pieces = tune.split(':')
        if len(tune_pieces) != 3:
            raise ValueError('tune should contain exactly 2 colons')
        self.tune = tune_pieces[2]
        self.tune_idx = 0
        self.parse_defaults(tune_pieces[1])

    def load(self):
        out = []
        for freq, dur in self.notes():
            out.append((int(freq), int(dur)))
        return out

    def parse_defaults(self, defaults):
        # Example: d=4,o=5,b=140
        val = 0
        id = ' '
        for char in defaults:
            char = char.lower()
            if char.isdigit():
                val *= 10
                val += ord(char) - ord('0')
                if id == 'o':
                    self.default_octave = val
                elif id == 'd':
                    self.default_duration = val
                elif id == 'b':
                    self.bpm = val
            elif char.isalpha():
                id = char
                val = 0
        # 240000 = 60 sec/min * 4 beats/whole-note * 1000 msec/sec
        self.msec_per_whole_note = 240000.0 / self.bpm

    def next_char(self):
        if self.tune_idx < len(self.tune):
            char = self.tune[self.tune_idx]
            self.tune_idx += 1
            if char == ',':
                char = ' '
            return char
        return '|'

    def notes(self):
        """ Generator which generates notes.
        
        Each note is a tuple where the first element is the frequency (in Hz) 
        and the second element is the duration (in milliseconds).
        """
        while True:
            # Skip blank characters and commas
            char = self.next_char()
            while char == ' ':
                char = self.next_char()

            # Parse duration, if present. A duration of 1 means a whole note.
            # A duration of 8 means 1/8 note.
            duration = 0
            while char.isdigit():
                duration *= 10
                duration += ord(char) - ord('0')
                char = self.next_char()
            if duration == 0:
                duration = self.default_duration

            if char == '|': # marker for end of tune
                return

            note = char.lower()
            if note >= 'a' and note <= 'g':
                note_idx = ord(note) - ord('a')
            elif note == 'h':
                note_idx = 1    # H is equivalent to B
            else:
                note_idx = 7    # pause
            char = self.next_char()

            # Check for sharp note
            if char == '#':
                note_idx += 8
                char = self.next_char()

            # Check for duration modifier before octave
            # The spec has the dot after the octave, but some places do it
            # the other way around.
            duration_multiplier = 1.0
            if char == '.':
                duration_multiplier = 1.5
                char = self.next_char()

            # Check for octave
            if char >= '4' and char <= '7':
                octave = ord(char) - ord('0')
                char = self.next_char()
            else:
                octave = self.default_octave

            # Check for duration modifier after octave
            if char == '.':
                duration_multiplier = 1.5
                char = self.next_char()

            freq = self.NOTE[note_idx] * (1 << (octave - 4))
            msec = (self.msec_per_whole_note / duration) * duration_multiplier

            yield freq, msec


# ILI9341 LCD ##################################################################
def color565(r, g, b):
    """ Convert individual r,g,b values to RGB565

    :param r: Red value
    :type r: int
    :param g: Green value
    :type g: int
    :param b: Blue value
    :type b: int
    :return: RGB565 color value
    :rtype: bytes
    """
    return ((r & 0xf8) << 8 | (g & 0xfc) << 3 | b >> 3).to_bytes(2, 'big')


class Display(object):
    """ Serial interface for 16-bit color (5-6-5 RGB) IL9341 display.

    Note:  All coordinates are zero based.
    """
    # Command constants from ILI9341 datasheet
    NOP = const(0x00)  # No-op
    SWRESET = const(0x01)  # Software reset
    RDDID = const(0x04)  # Read display ID info
    RDDST = const(0x09)  # Read display status
    SLPIN = const(0x10)  # Enter sleep mode
    SLPOUT = const(0x11)  # Exit sleep mode
    PTLON = const(0x12)  # Partial mode on
    NORON = const(0x13)  # Normal display mode on
    RDMODE = const(0x0A)  # Read display power mode
    RDMADCTL = const(0x0B)  # Read display MADCTL
    RDPIXFMT = const(0x0C)  # Read display pixel format
    RDIMGFMT = const(0x0D)  # Read display image format
    RDSELFDIAG = const(0x0F)  # Read display self-diagnostic
    INVOFF = const(0x20)  # Display inversion off
    INVON = const(0x21)  # Display inversion on
    GAMMASET = const(0x26)  # Gamma set
    DISPLAY_OFF = const(0x28)  # Display off
    DISPLAY_ON = const(0x29)  # Display on
    SET_COLUMN = const(0x2A)  # Column address set
    SET_PAGE = const(0x2B)  # Page address set
    WRITE_RAM = const(0x2C)  # Memory write
    READ_RAM = const(0x2E)  # Memory read
    PTLAR = const(0x30)  # Partial area
    VSCRDEF = const(0x33)  # Vertical scrolling definition
    MADCTL = const(0x36)  # Memory access control
    VSCRSADD = const(0x37)  # Vertical scrolling start address
    PIXFMT = const(0x3A)  # COLMOD: Pixel format set
    FRMCTR1 = const(0xB1)  # Frame rate control (In normal mode/full colors)
    FRMCTR2 = const(0xB2)  # Frame rate control (In idle mode/8 colors)
    FRMCTR3 = const(0xB3)  # Frame rate control (In partial mode/full colors)
    INVCTR = const(0xB4)  # Display inversion control
    DFUNCTR = const(0xB6)  # Display function control
    PWCTR1 = const(0xC0)  # Power control 1
    PWCTR2 = const(0xC1)  # Power control 2
    PWCTRA = const(0xCB)  # Power control A
    PWCTRB = const(0xCF)  # Power control B
    VMCTR1 = const(0xC5)  # VCOM control 1
    VMCTR2 = const(0xC7)  # VCOM control 2
    RDID1 = const(0xDA)  # Read ID 1
    RDID2 = const(0xDB)  # Read ID 2
    RDID3 = const(0xDC)  # Read ID 3
    RDID4 = const(0xDD)  # Read ID 4
    GMCTRP1 = const(0xE0)  # Positive gamma correction
    GMCTRN1 = const(0xE1)  # Negative gamma correction
    DTCA = const(0xE8)  # Driver timing control A
    DTCB = const(0xEA)  # Driver timing control B
    POSC = const(0xED)  # Power on sequence control
    ENABLE3G = const(0xF2)  # Enable 3 gamma control
    PUMPRC = const(0xF7)  # Pump ratio control
    ROTATE = {0: 0x88, 90: 0xE8, 180: 0x48, 270: 0x28}
    # Predefined colors
    CLR_BLACK = color565(0,0,0)
    CLR_WHITE = color565(255,255,255)

    def __init__(self, spi=SPI(1, baudrate=48000000, sck=Pin(10),
                 mosi=Pin(11), miso=Pin(12)), cs=Pin(13), dc=Pin(2), rst=Pin(1),
                 width=320, height=240, rotation=90):
        """ Initialize LCD

        :param spi: SPI interface for LCD, defaults to pycogame display SPI
        :type spi: Class SPI, optional
        :param cs: Chip select pin, defaults to Pin(13)
        :type cs: Class Pin, optional
        :param dc: Data/Command pin, defaults to Pin(2)
        :type dc: Class Pin, optional
        :param rst: Reset pin, defaults to Pin(1)
        :type rst: Class Pin, optional
        :param width: Screen width, defaults to 320
        :type width: int, optional
        :param height: Screen height, defaults to 240
        :type height: int, optional
        :param rotation: Rotation must be 0, 90, 180 or 270, defaults to 90
        :type rotation: int, optional
        """
        self.spi = spi
        self.cs = cs
        self.dc = dc
        self.rst = rst
        self.width = width
        self.height = height

        # Initialize GPIO pins
        self.cs.init(self.cs.OUT, value=1)
        self.dc.init(self.dc.OUT, value=0)
        self.rst.init(self.rst.OUT, value=1)
        self.reset()

        # Send initialization commands
        self.write_cmd(self.SWRESET)  # Software reset
        sleep_ms(100)
        self.write_cmd(self.PWCTRB, 0x00, 0xC1, 0x30)  # Pwr ctrl B
        self.write_cmd(self.POSC, 0x64, 0x03, 0x12, 0x81)  # Pwr on seq. ctrl
        self.write_cmd(self.DTCA, 0x85, 0x00, 0x78)  # Driver timing ctrl A
        self.write_cmd(self.PWCTRA, 0x39, 0x2C, 0x00, 0x34, 0x02)  # Pwr ctrl A
        self.write_cmd(self.PUMPRC, 0x20)  # Pump ratio control
        self.write_cmd(self.DTCB, 0x00, 0x00)  # Driver timing ctrl B
        self.write_cmd(self.PWCTR1, 0x23)  # Pwr ctrl 1
        self.write_cmd(self.PWCTR2, 0x10)  # Pwr ctrl 2
        self.write_cmd(self.VMCTR1, 0x3E, 0x28)  # VCOM ctrl 1
        self.write_cmd(self.VMCTR2, 0x86)  # VCOM ctrl 2
        self.write_cmd(self.MADCTL, self.ROTATE[rotation])  # Memory access ctrl
        self.write_cmd(self.VSCRSADD, 0x00)  # Vertical scrolling start address
        self.write_cmd(self.PIXFMT, 0x55)  # COLMOD: Pixel format
        self.write_cmd(self.FRMCTR1, 0x00, 0x18)  # Frame rate ctrl
        self.write_cmd(self.DFUNCTR, 0x08, 0x82, 0x27)
        self.write_cmd(self.ENABLE3G, 0x00)  # Enable 3 gamma ctrl
        self.write_cmd(self.GAMMASET, 0x01)  # Gamma curve selected
        self.write_cmd(self.GMCTRP1, 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E,
                       0xF1, 0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00)
        self.write_cmd(self.GMCTRN1, 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31,
                       0xC1, 0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F)
        self.write_cmd(self.SLPOUT)  # Exit sleep
        sleep_ms(100)
        self.write_cmd(self.DISPLAY_ON)  # Display on
        sleep_ms(100)
        self.clear()

    def block(self, x0, y0, x1, y1, data):
        """ Write a block of data to display

        :param x0: Starting X position
        :type x0: int
        :param y0: Starting Y position
        :type y0: int
        :param x1: Ending X position
        :type x1: int
        :param y1: Ending Y positio
        :type y1: int
        :param data: Data buffer to write
        :type data: bytes
        """
        self.write_cmd(self.SET_COLUMN, *ustruct.pack(">HH", x0, x1))
        self.write_cmd(self.SET_PAGE, *ustruct.pack(">HH", y0, y1))

        self.write_cmd(self.WRITE_RAM)
        self.write_data(data)

    def cleanup(self):
        """ Clean up resources """
        self.clear()
        self.write_cmd(self.DISPLAY_OFF)
        self.spi.deinit()

    def clear(self, color=CLR_BLACK):
        """ Clear display / fill with specified color

        :param color: Color in COLOR565 format, defaults to black
        :type color: bytes, optional
        """
        w = self.width
        h = self.height
        # Clear display in 1024 byte blocks
        if color:
            line = color * (w * 8)
        else:
            line = bytearray(w * 16)
        for y in range(0, h, 8):
            self.block(0, y, w - 1, y + 7, line)

    def pixel(self, x, y, color):
        """ Draw a single pixel

        :param x: X position
        :type x: int
        :param y: Y position
        :type y: int
        :param color: Color in COLOR565 format
        :type color: bytes
        """
        self.block(x, y, x, y, color)

    def _vline(self, x, y, h, color):
        """ Draw a vertical line """
        line = color * h
        self.block(x, y, x, y + h - 1, line)

    def _hline(self, x, y, w, color):
        """ Draw a horizontal line """
        line = color * w
        self.block(x, y, x + w - 1, y, line)

    def line(self, x1, y1, x2, y2, color):
        """ Draw a line

        :param x1: Starting x coordinate of the line
        :type x1: int
        :param y1: Starting y coordinate of the line
        :type y1: int
        :param x2: Ending x coordinate of the line
        :type x2: int
        :param y2: Ending y coordinate of the line
        :type y2: int
        :param color: Color in COLOR565 format
        :type color: bytes
        """
        # Check for horizontal line
        if y1 == y2:
            if x1 > x2:
                x1, x2 = x2, x1
            self._hline(x1, y1, x2 - x1 + 1, color)
            return
        # Check for vertical line
        if x1 == x2:
            if y1 > y2:
                y1, y2 = y2, y1
            self._vline(x1, y1, y2 - y1 + 1, color)
            return
        # Changes in x, y
        dx = x2 - x1
        dy = y2 - y1
        # Determine how steep the line is
        is_steep = abs(dy) > abs(dx)
        # Rotate line
        if is_steep:
            x1, y1 = y1, x1
            x2, y2 = y2, x2
        # Swap start and end points if necessary
        if x1 > x2:
            x1, x2 = x2, x1
            y1, y2 = y2, y1
        # Recalculate differentials
        dx = x2 - x1
        dy = y2 - y1
        # Calculate error
        error = dx >> 1
        ystep = 1 if y1 < y2 else -1
        y = y1
        for x in range(x1, x2 + 1):
            # Had to reverse HW ????
            if not is_steep:
                self.pixel(x, y, color)
            else:
                self.pixel(y, x, color)
            error -= abs(dy)
            if error < 0:
                y += ystep
                error += dx

    def rect(self, x, y, w, h, color):
        """ Draw a rectangle

        :param x: Starting X position
        :type x: int
        :param y: Starting Y position
        :type y: int
        :param w: Width of rectangle
        :type w: int
        :param h: Height of rectangle
        :type h: int
        :param color: Color in COLOR565 format
        :type color: bytes
        """
        x2 = x + w - 1
        y2 = y + h - 1
        self._hline(x, y, w, color)
        self._hline(x, y2, w, color)
        self._vline(x, y, h, color)
        self._vline(x2, y, h, color)

    def _fill_hrect(self, x, y, w, h, color):
        """ Draw a filled rectangle (optimized for horizontal drawing) """
        chunk_height = 1024 // w
        chunk_count, remainder = divmod(h, chunk_height)
        chunk_size = chunk_height * w
        chunk_y = y
        if chunk_count:
            buf = color * chunk_size
            for c in range(0, chunk_count):
                self.block(x, chunk_y,
                           x + w - 1, chunk_y + chunk_height - 1,
                           buf)
                chunk_y += chunk_height

        if remainder:
            buf = color * remainder * w
            self.block(x, chunk_y,
                       x + w - 1, chunk_y + remainder - 1,
                       buf)

    def _fill_vrect(self, x, y, w, h, color):
        """ Draw a filled rectangle (optimized for vertical drawing) """
        chunk_width = 1024 // h
        chunk_count, remainder = divmod(w, chunk_width)
        chunk_size = chunk_width * h
        chunk_x = x
        if chunk_count:
            buf = color * chunk_size
            for c in range(0, chunk_count):
                self.block(chunk_x, y,
                           chunk_x + chunk_width - 1, y + h - 1,
                           buf)
                chunk_x += chunk_width

        if remainder:
            buf = color * remainder * h
            self.block(chunk_x, y,
                       chunk_x + remainder - 1, y + h - 1,
                       buf)

    def fill_rect(self, x, y, w, h, color):
        """ Draw a filled rectangle

        :param x: Starting X position
        :type x: int
        :param y: Starting Y position
        :type y: int
        :param w: Width of rectangle
        :type w: int
        :param h: Height of rectangle
        :type h: int
        :param color: Color in COLOR565 format
        :type color: bytes
        """
        if w > h:
            self._fill_hrect(x, y, w, h, color)
        else:
            self._fill_vrect(x, y, w, h, color)

    @classmethod
    def load_sprite(cls, path, w, h):
        """ Load sprite image, w x h cannot exceed 2048 - 64x32

        :param path: Image file path
        :type path: string
        :param w: width
        :type w: int
        :param h: height
        :type h: int
        :return: Image data, width, height
        :rtype: tuple
        """
        buf_size = w * h * 2
        with open(path, "rb") as f:
            return (f.read(buf_size), w, h)

    def draw_sprite(self, spr, x, y):
        """ Draw a sprite

        :param spr: (buffer, width, height)
        :type spr: tuple
        :param x: Starting X position
        :type x: int
        :param y: Starting Y position
        :type y: int
        """
        x2 = x + spr[1] - 1
        y2 = y + spr[2] - 1
        self.block(x, y, x2, y2, spr[0])

    def draw_image(self, path, x=0, y=0, w=320, h=240):
        """Draw image from flash

        :param path: Image file path
        :type path: string
        :param x: X coordinate of image left, defaults to 0
        :type x: int, optional
        :param y: Y coordinate of image top, defaults to 0
        :type y: int, optional
        :param w: Width of image, defaults to 320
        :type w: int, optional
        :param h: Height of image, defaults to 240
        :type h: int, optional
        """
        x2 = x + w - 1
        with open(path, "rb") as f:
            chunk_height = 1024 // w
            chunk_count, remainder = divmod(h, chunk_height)
            chunk_size = chunk_height * w * 2
            chunk_y = y
            if chunk_count:
                for c in range(0, chunk_count):
                    buf = f.read(chunk_size)
                    self.block(x, chunk_y,
                               x2, chunk_y + chunk_height - 1,
                               buf)
                    chunk_y += chunk_height
            if remainder:
                buf = f.read(remainder * w * 2)
                self.block(x, chunk_y,
                           x2, chunk_y + remainder - 1,
                           buf)

    def draw_letter(self, x, y, letter, font,
                    color=CLR_WHITE, background=CLR_BLACK):
        """ Draw a letter

        :param letter: Letter to draw
        :type letter: string
        :param font: Font
        :type font: Class XglcdFont
        :param color: Text color in COLOR565 format, defaults to white
        :type color: bytes, optional
        :param background: Color in COLOR565 format, defaults to black
        :type color: bytes, optional
        :return: width, height of the letter
        :rtype: tuple
        """
        buf, w, h = font.get_letter(letter, color, background)
        self.block(x, y, x + w - 1, y + h - 1, buf)
        return w, h

    def text(self, x, y, text, font, color=CLR_WHITE,
             background=CLR_BLACK, spacing=1):
        """ Draw text

        :param x: Starting X position
        :type x: int
        :param y: Starting Y position
        :type y: int
        :param text: Text to draw
        :type text: string
        :param font: Font class
        :type font: Class XglcdFont
        :param color: Text color in COLOR565 format, defaults to white
        :type color: bytes, optional
        :param background: Color in COLOR565 format, defaults to black
        :type color: bytes, optional
        :param spacing: Pixels between letters, defaults to 1
        :type spacing: int, optional
        :return: End x position of the "cursor"
        :rtype: int
        """
        for letter in text:
            # Get letter array and letter dimensions
            w, h = self.draw_letter(x, y, letter, font, color, background)
            # Fill in spacing
            if spacing:
                self._fill_hrect(x + w, y, spacing, h, background)
            # Position x for next letter
            x += (w + spacing)
        return x

    def reset(self):
        """ Perform reset: Low=initialization, High=normal operation """
        self.rst(0)
        sleep_ms(50)
        self.rst(1)
        sleep_ms(50)

    def scroll(self, x):
        """ Scroll display

        :param x: Number of pixels to scroll display
        :type x: int
        """
        self.write_cmd(self.VSCRSADD, x >> 8, x & 0xFF)

    def set_scroll(self, top, bottom):
        """ Set the height of the top and bottom scroll margins

        :param top: Height of top scroll margin
        :type top: int
        :param bottom: Height of bottom scroll margin
        :type bottom: int
        """
        # TODO: Fix - not working
        if top + bottom <= self.height:
            middle = self.height - top + bottom
            self.write_cmd(self.VSCRDEF,
                           top >> 8,
                           top & 0xFF,
                           middle >> 8,
                           middle & 0xFF,
                           bottom >> 8,
                           bottom & 0xFF)

    def write_cmd(self, command, *args):
        """ Send command to display

        Any extra args are send as data.

        :param command: ILI9341 command code
        :type command: byte
        """
        self.dc(0)
        self.cs(0)
        self.spi.write(bytearray([command]))
        self.cs(1)
        # Handle any passed data
        if len(args) > 0:
            self.write_data(bytearray(args))

    def write_data(self, data):
        """ Send data to display

        :param data: Data to transmit
        :type data: bytes
        """
        self.dc(1)
        self.cs(0)
        self.spi.write(data)
        self.cs(1)


# Fonts in X-GLCD 'C' format ###################################################
class Fonts():
    """ Class for storing default fonts

    Format: [width, height, start_letter, letter_count, font_data]
    """
    # Generic 8 bit fixed width font
    small = (5, 8, 32, 96,
"""0x05,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x00,0x5f,0x00,0x00,
0x05,0x00,0x07,0x00,0x07,0x00,
0x05,0x14,0x7f,0x14,0x7f,0x14,
0x05,0x24,0x2a,0x7f,0x2a,0x12,
0x05,0x23,0x13,0x08,0x64,0x62,
0x05,0x36,0x49,0x56,0x20,0x50,
0x05,0x00,0x08,0x07,0x03,0x00,
0x05,0x00,0x1c,0x22,0x41,0x00,
0x05,0x00,0x41,0x22,0x1c,0x00,
0x05,0x2a,0x1c,0x7f,0x1c,0x2a,
0x05,0x08,0x08,0x3e,0x08,0x08,
0x05,0x00,0x80,0x70,0x30,0x00,
0x05,0x08,0x08,0x08,0x08,0x08,
0x05,0x00,0x00,0x60,0x60,0x00,
0x05,0x20,0x10,0x08,0x04,0x02,
0x05,0x3e,0x51,0x49,0x45,0x3e,
0x05,0x00,0x42,0x7f,0x40,0x00,
0x05,0x72,0x49,0x49,0x49,0x46,
0x05,0x21,0x41,0x49,0x4d,0x33,
0x05,0x18,0x14,0x12,0x7f,0x10,
0x05,0x27,0x45,0x45,0x45,0x39,
0x05,0x3c,0x4a,0x49,0x49,0x31,
0x05,0x41,0x21,0x11,0x09,0x07,
0x05,0x36,0x49,0x49,0x49,0x36,
0x05,0x46,0x49,0x49,0x29,0x1e,
0x05,0x00,0x00,0x14,0x00,0x00,
0x05,0x00,0x40,0x34,0x00,0x00,
0x05,0x00,0x08,0x14,0x22,0x41,
0x05,0x14,0x14,0x14,0x14,0x14,
0x05,0x00,0x41,0x22,0x14,0x08,
0x05,0x02,0x01,0x59,0x09,0x06,
0x05,0x3e,0x41,0x5d,0x59,0x4e,
0x05,0x7c,0x12,0x11,0x12,0x7c,
0x05,0x7f,0x49,0x49,0x49,0x36,
0x05,0x3e,0x41,0x41,0x41,0x22,
0x05,0x7f,0x41,0x41,0x41,0x3e,
0x05,0x7f,0x49,0x49,0x49,0x41,
0x05,0x7f,0x09,0x09,0x09,0x01,
0x05,0x3e,0x41,0x41,0x51,0x73,
0x05,0x7f,0x08,0x08,0x08,0x7f,
0x05,0x00,0x41,0x7f,0x41,0x00,
0x05,0x20,0x40,0x41,0x3f,0x01,
0x05,0x7f,0x08,0x14,0x22,0x41,
0x05,0x7f,0x40,0x40,0x40,0x40,
0x05,0x7f,0x02,0x1c,0x02,0x7f,
0x05,0x7f,0x04,0x08,0x10,0x7f,
0x05,0x3e,0x41,0x41,0x41,0x3e,
0x05,0x7f,0x09,0x09,0x09,0x06,
0x05,0x3e,0x41,0x51,0x21,0x5e,
0x05,0x7f,0x09,0x19,0x29,0x46,
0x05,0x26,0x49,0x49,0x49,0x32,
0x05,0x03,0x01,0x7f,0x01,0x03,
0x05,0x3f,0x40,0x40,0x40,0x3f,
0x05,0x1f,0x20,0x40,0x20,0x1f,
0x05,0x3f,0x40,0x38,0x40,0x3f,
0x05,0x63,0x14,0x08,0x14,0x63,
0x05,0x03,0x04,0x78,0x04,0x03,
0x05,0x61,0x59,0x49,0x4d,0x43,
0x05,0x00,0x7f,0x41,0x41,0x41,
0x05,0x02,0x04,0x08,0x10,0x20,
0x05,0x00,0x41,0x41,0x41,0x7f,
0x05,0x04,0x02,0x01,0x02,0x04,
0x05,0x40,0x40,0x40,0x40,0x40,
0x05,0x00,0x03,0x07,0x08,0x00,
0x05,0x20,0x54,0x54,0x78,0x40,
0x05,0x7f,0x28,0x44,0x44,0x38,
0x05,0x38,0x44,0x44,0x44,0x28,
0x05,0x38,0x44,0x44,0x28,0x7f,
0x05,0x38,0x54,0x54,0x54,0x18,
0x05,0x00,0x08,0x7e,0x09,0x02,
0x05,0x18,0xa4,0xa4,0x9c,0x78,
0x05,0x7f,0x08,0x04,0x04,0x78,
0x05,0x00,0x44,0x7d,0x40,0x00,
0x05,0x20,0x40,0x40,0x3d,0x00,
0x05,0x7f,0x10,0x28,0x44,0x00,
0x05,0x00,0x41,0x7f,0x40,0x00,
0x05,0x7c,0x04,0x78,0x04,0x78,
0x05,0x7c,0x08,0x04,0x04,0x78,
0x05,0x38,0x44,0x44,0x44,0x38,
0x05,0xfc,0x18,0x24,0x24,0x18,
0x05,0x18,0x24,0x24,0x18,0xfc,
0x05,0x7c,0x08,0x04,0x04,0x08,
0x05,0x48,0x54,0x54,0x54,0x24,
0x05,0x04,0x04,0x3f,0x44,0x24,
0x05,0x3c,0x40,0x40,0x20,0x7c,
0x05,0x1c,0x20,0x40,0x20,0x1c,
0x05,0x3c,0x40,0x30,0x40,0x3c,
0x05,0x44,0x28,0x10,0x28,0x44,
0x05,0x4c,0x90,0x90,0x90,0x7c,
0x05,0x44,0x64,0x54,0x4c,0x44,
0x05,0x00,0x08,0x36,0x41,0x00,
0x05,0x00,0x00,0x77,0x00,0x00,
0x05,0x00,0x41,0x36,0x08,0x00,
0x05,0x02,0x01,0x02,0x04,0x02,
0x05,0x3c,0x26,0x23,0x26,0x3c,
""")

    # Ubuntu Mono 8x14
    medium = (8, 14, 32, 96,
"""0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x04,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x06,0x00,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x00,0x00,
0x08,0x88,0x00,0x88,0x07,0xF8,0x00,0x8F,0x00,0x88,0x07,0xF8,0x00,0x8F,0x00,0x88,0x00,
0x08,0x00,0x00,0x1C,0x02,0x22,0x04,0x22,0x04,0x23,0x1C,0x42,0x04,0x42,0x04,0x80,0x03,
0x08,0x0E,0x04,0x11,0x02,0x91,0x01,0x6E,0x00,0xB0,0x03,0x4C,0x04,0x42,0x04,0x81,0x03,
0x08,0x00,0x00,0x80,0x03,0x4E,0x04,0x31,0x04,0x71,0x04,0x91,0x04,0x8E,0x03,0xE0,0x02,
0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x06,0x00,0x00,0x00,0x00,0xF0,0x03,0x0C,0x0C,0x02,0x10,0x01,0x20,0x00,0x00,0x00,0x00,
0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x20,0x02,0x10,0x0C,0x0C,0xF0,0x03,0x00,0x00,
0x08,0x00,0x00,0x02,0x00,0x12,0x00,0x1C,0x00,0x07,0x00,0x1C,0x00,0x12,0x00,0x02,0x00,
0x08,0x00,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0xF8,0x03,0x40,0x00,0x40,0x00,0x40,0x00,
0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,
0x06,0x00,0x00,0x00,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x00,0x00,0x00,0x00,
0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x06,0x00,0x00,0x00,0x30,0x00,0x0E,0xC0,0x01,0x38,0x00,0x07,0x00,0x00,0x00,0x00,0x00,
0x08,0x00,0x00,0xFC,0x01,0x02,0x02,0x01,0x04,0x31,0x04,0x01,0x04,0x02,0x02,0xFC,0x01,
0x07,0x00,0x00,0x00,0x00,0x04,0x04,0x02,0x04,0xFF,0x07,0x00,0x04,0x00,0x04,0x00,0x00,
0x08,0x00,0x00,0x02,0x06,0x03,0x05,0x81,0x04,0x41,0x04,0x21,0x04,0x11,0x04,0x0E,0x04,
0x08,0x00,0x00,0x02,0x02,0x01,0x04,0x21,0x04,0x21,0x04,0x21,0x04,0x52,0x02,0x8C,0x01,
0x08,0x00,0x00,0xC0,0x00,0xA0,0x00,0x98,0x00,0x84,0x00,0x82,0x00,0xFF,0x07,0x80,0x00,
0x08,0x00,0x00,0x00,0x02,0x1F,0x04,0x11,0x04,0x11,0x04,0x11,0x04,0x21,0x02,0xC1,0x01,
0x08,0x00,0x00,0xF8,0x01,0x14,0x02,0x12,0x04,0x11,0x04,0x11,0x04,0x21,0x02,0xC0,0x01,
0x08,0x00,0x00,0x01,0x00,0x01,0x00,0x01,0x07,0xE1,0x00,0x19,0x00,0x05,0x00,0x03,0x00,
0x08,0x00,0x00,0x8E,0x03,0x51,0x04,0x21,0x04,0x21,0x04,0x21,0x04,0x51,0x04,0x8E,0x03,
0x08,0x00,0x00,0x1C,0x00,0x22,0x04,0x41,0x04,0x41,0x04,0x41,0x02,0x42,0x01,0xFC,0x00,
0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x10,0x00,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,
0x08,0x00,0x00,0x40,0x00,0xA0,0x00,0xA0,0x00,0x10,0x01,0x10,0x01,0x08,0x02,0x08,0x02,
0x08,0x00,0x00,0x20,0x01,0x20,0x01,0x20,0x01,0x20,0x01,0x20,0x01,0x20,0x01,0x20,0x01,
0x08,0x00,0x00,0x08,0x02,0x08,0x02,0x10,0x01,0x10,0x01,0xA0,0x00,0xA0,0x00,0x40,0x00,
0x07,0x00,0x00,0x02,0x00,0x01,0x00,0x81,0x05,0x41,0x00,0x33,0x00,0x1E,0x00,0x00,0x00,
0x08,0x00,0x00,0xF8,0x03,0x06,0x04,0xF1,0x09,0x09,0x12,0x09,0x12,0x09,0x12,0xFE,0x03,
0x08,0x00,0x06,0xC0,0x01,0xB8,0x00,0x86,0x00,0x87,0x00,0xB8,0x00,0xC0,0x01,0x00,0x06,
0x08,0x00,0x00,0xFF,0x07,0x21,0x04,0x21,0x04,0x21,0x04,0x21,0x04,0x72,0x02,0x8C,0x01,
0x08,0x00,0x00,0xF8,0x00,0x06,0x03,0x01,0x04,0x01,0x04,0x01,0x04,0x01,0x04,0x02,0x02,
0x08,0x00,0x00,0xFF,0x07,0x01,0x04,0x01,0x04,0x01,0x04,0x01,0x04,0x06,0x03,0xF8,0x00,
0x08,0x00,0x00,0x00,0x00,0xFF,0x07,0x21,0x04,0x21,0x04,0x21,0x04,0x21,0x04,0x01,0x04,
0x08,0x00,0x00,0x00,0x00,0xFF,0x07,0x21,0x00,0x21,0x00,0x21,0x00,0x21,0x00,0x01,0x00,
0x08,0x00,0x00,0xF8,0x00,0x06,0x03,0x01,0x04,0x01,0x04,0x01,0x04,0x41,0x04,0xC2,0x07,
0x08,0x00,0x00,0xFF,0x07,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0xFF,0x07,
0x07,0x00,0x00,0x00,0x00,0x01,0x04,0x01,0x04,0xFF,0x07,0x01,0x04,0x01,0x04,0x00,0x00,
0x08,0x00,0x00,0x00,0x02,0x01,0x04,0x01,0x04,0x01,0x04,0x01,0x04,0x01,0x02,0xFF,0x01,
0x08,0x00,0x00,0xFF,0x07,0x20,0x00,0x50,0x00,0x88,0x00,0x04,0x01,0x02,0x02,0x01,0x04,
0x08,0x00,0x00,0x00,0x00,0xFF,0x07,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,
0x08,0x00,0x00,0xF8,0x07,0x07,0x00,0x38,0x00,0x40,0x00,0x38,0x00,0x07,0x00,0xF8,0x07,
0x08,0x00,0x00,0xFF,0x07,0x02,0x00,0x0C,0x00,0x30,0x00,0xC0,0x00,0x00,0x01,0xFF,0x07,
0x08,0x00,0x00,0xFC,0x01,0x02,0x02,0x01,0x04,0x01,0x04,0x01,0x04,0x02,0x02,0xFC,0x01,
0x08,0x00,0x00,0xFF,0x07,0x41,0x00,0x41,0x00,0x41,0x00,0x41,0x00,0x22,0x00,0x1C,0x00,
0x08,0x00,0x00,0xFC,0x01,0x02,0x02,0x01,0x04,0x01,0x0C,0x01,0x14,0x02,0x22,0xFC,0x21,
0x08,0x00,0x00,0xFF,0x07,0x41,0x00,0x41,0x00,0x41,0x00,0xC1,0x00,0x22,0x01,0x1C,0x06,
0x08,0x00,0x00,0x0E,0x02,0x11,0x04,0x21,0x04,0x21,0x04,0x21,0x04,0x41,0x04,0x82,0x03,
0x08,0x00,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0xFF,0x07,0x01,0x00,0x01,0x00,0x01,0x00,
0x08,0x00,0x00,0xFF,0x03,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0xFF,0x03,
0x08,0x03,0x00,0x3C,0x00,0xC0,0x01,0x00,0x06,0x00,0x06,0xC0,0x01,0x3C,0x00,0x03,0x00,
0x08,0x00,0x00,0xFF,0x07,0x00,0x03,0xE0,0x00,0x10,0x00,0xE0,0x00,0x00,0x03,0xFF,0x07,
0x08,0x01,0x04,0x02,0x03,0x8C,0x00,0x70,0x00,0x70,0x00,0x8C,0x00,0x02,0x03,0x01,0x04,
0x08,0x00,0x00,0x01,0x00,0x0E,0x00,0x30,0x00,0xC0,0x07,0x30,0x00,0x0E,0x00,0x01,0x00,
0x08,0x00,0x00,0x01,0x06,0x01,0x05,0xC1,0x04,0x31,0x04,0x09,0x04,0x05,0x04,0x03,0x04,
0x06,0x00,0x00,0x00,0x00,0xFF,0x3F,0x01,0x20,0x01,0x20,0x01,0x20,0x00,0x00,0x00,0x00,
0x07,0x00,0x00,0x01,0x00,0x0F,0x00,0x78,0x00,0xC0,0x03,0x00,0x1E,0x00,0x30,0x00,0x00,
0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x20,0x01,0x20,0x01,0x20,0xFF,0x3F,0x00,0x00,
0x08,0x00,0x00,0x30,0x00,0x18,0x00,0x06,0x00,0x01,0x00,0x06,0x00,0x18,0x00,0x30,0x00,
0x08,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,
0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x02,0x00,0x04,0x00,0x00,0x00,0x00,0x00,
0x08,0x00,0x00,0x80,0x03,0x48,0x04,0x48,0x04,0x48,0x04,0x48,0x04,0x58,0x04,0xF0,0x07,
0x08,0x00,0x00,0xFF,0x07,0x08,0x04,0x08,0x04,0x08,0x04,0x08,0x04,0x10,0x02,0xE0,0x01,
0x08,0x00,0x00,0xE0,0x01,0x10,0x02,0x08,0x04,0x08,0x04,0x08,0x04,0x08,0x04,0x08,0x04,
0x08,0x00,0x00,0xE0,0x01,0x10,0x02,0x08,0x04,0x08,0x04,0x08,0x04,0x08,0x04,0xFF,0x07,
0x08,0x00,0x00,0xE0,0x01,0x50,0x02,0x48,0x04,0x48,0x04,0x48,0x04,0x50,0x04,0x60,0x00,
0x08,0x00,0x00,0x08,0x00,0x08,0x00,0xFE,0x07,0x09,0x00,0x09,0x00,0x09,0x00,0x09,0x00,
0x08,0x00,0x00,0xE0,0x21,0x10,0x22,0x08,0x24,0x08,0x24,0x08,0x24,0x08,0x14,0xF8,0x0F,
0x08,0x00,0x00,0xFF,0x07,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0xF0,0x07,
0x08,0x00,0x00,0x08,0x00,0x08,0x00,0xFA,0x03,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,
0x07,0x00,0x00,0x00,0x20,0x08,0x20,0x08,0x20,0x08,0x20,0x0A,0x20,0xF8,0x1F,0x00,0x00,
0x08,0x00,0x00,0xFF,0x07,0x40,0x00,0xA0,0x00,0x20,0x01,0x10,0x02,0x08,0x06,0x00,0x04,
0x08,0x00,0x00,0x01,0x00,0x01,0x00,0xFF,0x03,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,
0x08,0x00,0x00,0xF8,0x07,0x08,0x00,0x08,0x00,0xF8,0x00,0x08,0x00,0x08,0x00,0xF0,0x07,
0x08,0x00,0x00,0xF8,0x07,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x10,0x00,0xE0,0x07,
0x08,0x00,0x00,0xE0,0x01,0x10,0x02,0x08,0x04,0x08,0x04,0x08,0x04,0x10,0x02,0xE0,0x01,
0x08,0x00,0x00,0xF8,0x3F,0x08,0x04,0x08,0x04,0x08,0x04,0x08,0x04,0x10,0x02,0xE0,0x01,
0x08,0x00,0x00,0xE0,0x01,0x10,0x02,0x08,0x04,0x08,0x04,0x08,0x04,0x08,0x04,0xF8,0x3F,
0x08,0x00,0x00,0x00,0x00,0xF8,0x07,0x10,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,
0x08,0x00,0x00,0x30,0x02,0x48,0x04,0x48,0x04,0x48,0x04,0x88,0x04,0x88,0x04,0x08,0x03,
0x08,0x00,0x00,0x08,0x00,0x08,0x00,0xFE,0x03,0x08,0x04,0x08,0x04,0x08,0x04,0x08,0x04,
0x08,0x00,0x00,0xF8,0x03,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0xF8,0x07,
0x08,0x00,0x00,0x18,0x00,0x60,0x00,0x80,0x03,0x00,0x04,0x80,0x03,0x60,0x00,0x18,0x00,
0x08,0x00,0x00,0x78,0x00,0x80,0x07,0x00,0x03,0xE0,0x00,0x00,0x03,0x80,0x07,0x78,0x00,
0x08,0x00,0x00,0x08,0x04,0x10,0x02,0x20,0x01,0xC0,0x00,0x20,0x01,0x10,0x02,0x08,0x04,
0x08,0x00,0x00,0x18,0x20,0x60,0x20,0x80,0x21,0x00,0x12,0x00,0x0E,0xE0,0x01,0x18,0x00,
0x08,0x00,0x00,0x08,0x04,0x08,0x07,0x88,0x04,0x48,0x04,0x28,0x04,0x18,0x04,0x08,0x04,
0x07,0x00,0x00,0x40,0x00,0x40,0x00,0xBE,0x1F,0x01,0x20,0x01,0x20,0x01,0x20,0x00,0x00,
0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,
0x08,0x00,0x00,0x00,0x00,0x01,0x20,0x01,0x20,0x01,0x20,0xBE,0x1F,0x40,0x00,0x40,0x00,
0x08,0x00,0x00,0x80,0x00,0x40,0x00,0x40,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x40,0x00,
0x04,0xFF,0x03,0x01,0x02,0x01,0x02,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 
""")

    # Ubuntu Mono 13x23
    large = (13, 23, 32, 96,
"""0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0xFF,0xC7,0x03,0xFF,0xC7,0x03,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0D,0x60,0x18,0x00,0x60,0x18,0x03,0x60,0xF8,0x03,0xE0,0xFF,0x00,0xFC,0x1F,0x00,0x7F,0x18,0x00,0x63,0x18,0x03,0x60,0xF8,0x03,0xE0,0xFF,0x00,0xFC,0x1F,0x00,0x7F,0x18,0x00,0x63,0x18,0x00,0x60,0x18,0x00,
0x0C,0x00,0x00,0x00,0xF8,0x80,0x01,0xFC,0x81,0x03,0x8C,0x01,0x03,0x86,0x03,0x03,0x07,0x03,0x1F,0x07,0x03,0x1F,0x06,0x06,0x03,0x06,0x06,0x03,0x0E,0x8C,0x01,0x0C,0xFC,0x01,0x00,0x78,0x00,0x00,0x00,0x00,
0x0D,0x7C,0x00,0x02,0xFE,0x00,0x03,0xC7,0xC1,0x01,0x83,0xF1,0x00,0xC7,0x39,0x00,0xFE,0x0E,0x00,0xFC,0xFF,0x00,0xC0,0xFD,0x01,0x70,0x8E,0x03,0x3C,0x06,0x03,0x0E,0x8E,0x03,0x03,0xFC,0x01,0x01,0xF8,0x00,
0x0D,0x00,0x78,0x00,0x3C,0xFE,0x01,0xFE,0x87,0x01,0xC7,0x03,0x03,0x83,0x03,0x03,0x83,0x07,0x03,0xC3,0x0E,0x03,0x67,0x9C,0x01,0x3E,0xF8,0x01,0x1C,0xFC,0x00,0x00,0xFF,0x01,0x00,0x87,0x03,0x00,0x00,0x02,
0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0xC0,0xFF,0x01,0xF0,0x80,0x07,0x38,0x00,0x0E,0x1C,0x00,0x1C,0x0E,0x00,0x38,0x07,0x00,0x70,0x02,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x20,0x07,0x00,0x70,0x0E,0x00,0x38,0x1C,0x00,0x1C,0x38,0x00,0x0E,0xF0,0x80,0x07,0xC0,0xFF,0x01,0x00,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0C,0x00,0x00,0x00,0x10,0x00,0x00,0x38,0x02,0x00,0x30,0x07,0x00,0xB0,0x07,0x00,0xEF,0x01,0x00,0x7F,0x00,0x00,0xEF,0x01,0x00,0xB0,0x07,0x00,0x30,0x07,0x00,0x38,0x02,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
0x0C,0x00,0x06,0x00,0x00,0x06,0x00,0x00,0x06,0x00,0x00,0x06,0x00,0x00,0x06,0x00,0xF0,0xFF,0x00,0xF0,0xFF,0x00,0x00,0x06,0x00,0x00,0x06,0x00,0x00,0x06,0x00,0x00,0x06,0x00,0x00,0x06,0x00,0x00,0x00,0x00,
0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x30,0x00,0x80,0x19,0x00,0xC0,0x1F,0x00,0xC0,0x0F,0x00,0x80,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x00,0x0C,0x00,0x00,0x0C,0x00,0x00,0x0C,0x00,0x00,0x0C,0x00,0x00,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x00,0xC0,0x03,0x00,0xC0,0x03,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0B,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x78,0x00,0x00,0x3F,0x00,0xE0,0x07,0x00,0xFC,0x00,0x00,0x1F,0x00,0xE0,0x07,0x00,0xFC,0x00,0x00,0x1F,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0D,0xE0,0x1F,0x00,0xF8,0x7F,0x00,0x1E,0xE0,0x01,0x06,0x80,0x01,0x03,0x00,0x03,0x83,0x07,0x03,0x83,0x07,0x03,0x83,0x07,0x03,0x03,0x00,0x03,0x06,0x80,0x01,0x1E,0xE0,0x01,0xF8,0x7F,0x00,0xE0,0x1F,0x00,
0x0B,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x03,0x38,0x00,0x03,0x1C,0x00,0x03,0x0E,0x00,0x03,0xFF,0xFF,0x03,0xFF,0xFF,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,
0x0D,0x00,0x00,0x00,0x04,0x80,0x03,0x0E,0xE0,0x03,0x06,0x70,0x03,0x03,0x38,0x03,0x03,0x18,0x03,0x03,0x0C,0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x86,0x01,0x03,0xFE,0x00,0x03,0x7C,0x00,0x03,0x00,0x00,0x03,
0x0C,0x00,0x00,0x00,0x02,0x80,0x01,0x06,0x80,0x03,0x03,0x00,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x83,0x03,0x03,0x86,0x87,0x03,0xFE,0x8E,0x01,0x7C,0xFC,0x01,0x00,0x78,0x00,0x00,0x00,0x00,
0x0D,0x00,0x1C,0x00,0x00,0x1E,0x00,0x80,0x1F,0x00,0xC0,0x19,0x00,0xE0,0x18,0x00,0x30,0x18,0x00,0x18,0x18,0x00,0x0C,0x18,0x00,0x06,0x18,0x00,0xFF,0xFF,0x03,0xFF,0xFF,0x03,0x00,0x18,0x00,0x00,0x18,0x00,
0x0C,0x00,0x00,0x00,0x00,0x80,0x01,0xF0,0x81,0x03,0xFF,0x01,0x03,0x83,0x01,0x03,0x83,0x01,0x03,0x83,0x01,0x03,0x83,0x03,0x03,0x03,0x83,0x03,0x03,0x87,0x01,0x03,0xFE,0x00,0x03,0x7C,0x00,0x00,0x00,0x00,
0x0D,0x00,0x00,0x00,0x80,0x3F,0x00,0xE0,0xFF,0x00,0x78,0xC3,0x01,0x9C,0x81,0x03,0x8C,0x01,0x03,0x86,0x01,0x03,0x86,0x01,0x03,0x83,0x01,0x03,0x83,0x83,0x03,0x03,0xC3,0x01,0x03,0xFF,0x00,0x00,0x7C,0x00,
0x0D,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x80,0x03,0x03,0xF0,0x03,0x03,0x7E,0x00,0x83,0x07,0x00,0xE3,0x01,0x00,0x73,0x00,0x00,0x1B,0x00,0x00,0x0F,0x00,0x00,0x03,0x00,0x00,
0x0D,0x38,0x78,0x00,0x7C,0xFC,0x01,0xC6,0x8E,0x01,0x87,0x87,0x03,0x83,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x83,0x03,0x03,0x87,0x87,0x03,0xC6,0x8E,0x01,0x7C,0xFC,0x01,0x38,0x78,0x00,
0x0C,0xF8,0x00,0x00,0xFC,0x03,0x03,0x0E,0x03,0x03,0x07,0x07,0x03,0x03,0x06,0x03,0x03,0x86,0x01,0x03,0x86,0x01,0x03,0xC6,0x01,0x06,0xE6,0x00,0x0E,0x7B,0x00,0xFC,0x3F,0x00,0xF0,0x07,0x00,0x00,0x00,0x00,
0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x80,0x01,0xE0,0xC1,0x03,0xE0,0xC1,0x03,0xC0,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x30,0xC0,0x80,0x19,0xE0,0xC1,0x1F,0xE0,0xC1,0x0F,0xC0,0x80,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0D,0x00,0x0E,0x00,0x00,0x0E,0x00,0x00,0x0E,0x00,0x00,0x1B,0x00,0x00,0x1B,0x00,0x80,0x3B,0x00,0x80,0x31,0x00,0x80,0x31,0x00,0xC0,0x71,0x00,0xC0,0x60,0x00,0xC0,0x60,0x00,0xE0,0xE0,0x00,0x40,0x40,0x00,
0x0D,0x80,0x31,0x00,0x80,0x31,0x00,0x80,0x31,0x00,0x80,0x31,0x00,0x80,0x31,0x00,0x80,0x31,0x00,0x80,0x31,0x00,0x80,0x31,0x00,0x80,0x31,0x00,0x80,0x31,0x00,0x80,0x31,0x00,0x80,0x31,0x00,0x80,0x31,0x00,
0x0D,0x40,0x40,0x00,0xE0,0xE0,0x00,0xC0,0x60,0x00,0xC0,0x60,0x00,0xC0,0x71,0x00,0x80,0x31,0x00,0x80,0x31,0x00,0x80,0x3B,0x00,0x00,0x1B,0x00,0x00,0x1B,0x00,0x00,0x0E,0x00,0x00,0x0E,0x00,0x00,0x0E,0x00,
0x0B,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x07,0x00,0x00,0x03,0x80,0x01,0x03,0xC6,0x03,0x03,0xC7,0x03,0x83,0x81,0x01,0xC7,0x00,0x00,0x7E,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0D,0xC0,0x7F,0x00,0xF0,0xFF,0x03,0x3C,0x80,0x07,0x0E,0x00,0x0E,0x06,0x3E,0x1C,0x03,0xFF,0x18,0x83,0xC1,0x30,0xC3,0x81,0x31,0xC3,0x80,0x31,0xC7,0x80,0x31,0xCE,0x80,0x31,0xFC,0xFF,0x31,0xF8,0xFF,0x01,
0x0D,0x00,0x00,0x03,0x00,0xE0,0x03,0x00,0xFE,0x01,0xC0,0x1F,0x00,0xF8,0x1B,0x00,0x3F,0x18,0x00,0x07,0x18,0x00,0x3F,0x18,0x00,0xF8,0x1B,0x00,0xC0,0x1F,0x00,0x00,0xFE,0x01,0x00,0xE0,0x03,0x00,0x00,0x03,
0x0D,0x00,0x00,0x00,0xFF,0xFF,0x03,0xFF,0xFF,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x87,0x03,0x03,0x86,0x87,0x03,0xFE,0xC6,0x01,0x78,0xFC,0x00,0x00,0x78,0x00,
0x0D,0xC0,0x1F,0x00,0xF8,0x7F,0x00,0x3C,0xF0,0x00,0x0E,0xC0,0x01,0x06,0x80,0x01,0x03,0x00,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x06,0x80,0x03,0x02,0x00,0x01,
0x0D,0x00,0x00,0x00,0xFF,0xFF,0x03,0xFF,0xFF,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x06,0x80,0x01,0x0E,0xC0,0x01,0x3C,0xF0,0x00,0xF8,0x7F,0x00,0xE0,0x1F,0x00,
0x0D,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x03,0xFF,0xFF,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x00,0x03,0x00,0x00,0x03,
0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x03,0xFF,0xFF,0x03,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x00,0x00,0x00,0x00,0x00,
0x0D,0xC0,0x1F,0x00,0xF8,0x7F,0x00,0x3C,0xF0,0x00,0x0E,0xC0,0x01,0x06,0x80,0x01,0x07,0x80,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x03,0x06,0x03,0x07,0xFE,0x03,0x02,0xFE,0x01,
0x0D,0xFF,0xFF,0x03,0xFF,0xFF,0x03,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0xFF,0xFF,0x03,0xFF,0xFF,0x03,
0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0xFF,0xFF,0x03,0xFF,0xFF,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0C,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x80,0x01,0x03,0x00,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x03,0x80,0x03,0x03,0xC0,0x01,0xFF,0xFF,0x00,0xFF,0x7F,0x00,0x00,0x00,0x00,
0x0D,0x00,0x00,0x00,0xFF,0xFF,0x03,0xFF,0xFF,0x03,0x00,0x03,0x00,0xC0,0x07,0x00,0xE0,0x06,0x00,0x70,0x0C,0x00,0x38,0x18,0x00,0x1C,0x70,0x00,0x07,0xE0,0x00,0x03,0xC0,0x03,0x01,0x00,0x03,0x00,0x00,0x02,
0x0D,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x03,0xFF,0xFF,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,
0x0D,0xE0,0xFF,0x03,0xFF,0xFF,0x03,0x07,0x00,0x00,0x3E,0x00,0x00,0xF8,0x01,0x00,0xC0,0x07,0x00,0x00,0x06,0x00,0xC0,0x07,0x00,0xF0,0x01,0x00,0x3E,0x00,0x00,0x07,0x00,0x00,0xFF,0xFF,0x03,0xE0,0xFF,0x03,
0x0C,0x00,0x00,0x00,0xFF,0xFF,0x03,0xFF,0xFF,0x03,0x1E,0x00,0x00,0x3C,0x00,0x00,0xF0,0x00,0x00,0xC0,0x03,0x00,0x00,0x0F,0x00,0x00,0x3C,0x00,0x00,0xE0,0x01,0xFF,0xFF,0x03,0xFF,0xFF,0x03,0x00,0x00,0x00,
0x0D,0xE0,0x1F,0x00,0xF8,0x7F,0x00,0x1E,0xE0,0x01,0x06,0x80,0x01,0x03,0x00,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x03,0x00,0x03,0x06,0x80,0x01,0x1E,0xE0,0x01,0xF8,0x7F,0x00,0xE0,0x1F,0x00,
0x0D,0x00,0x00,0x00,0xFF,0xFF,0x03,0xFF,0xFF,0x03,0x03,0x06,0x00,0x03,0x06,0x00,0x03,0x06,0x00,0x03,0x06,0x00,0x03,0x06,0x00,0x03,0x06,0x00,0x06,0x03,0x00,0x8E,0x03,0x00,0xFC,0x01,0x00,0xF8,0x00,0x00,
0x0D,0xE0,0x1F,0x00,0xF8,0xFF,0x00,0x1E,0xE0,0x01,0x06,0x80,0x01,0x03,0x00,0x03,0x03,0x00,0x07,0x03,0x00,0x0F,0x03,0x00,0x1B,0x03,0x00,0x1B,0x06,0x80,0x31,0x1E,0xE0,0x30,0xF8,0x7F,0x30,0xE0,0x1F,0x00,
0x0D,0x00,0x00,0x00,0xFF,0xFF,0x03,0xFF,0xFF,0x03,0x03,0x06,0x00,0x03,0x06,0x00,0x03,0x06,0x00,0x03,0x06,0x00,0x03,0x1E,0x00,0x07,0x3B,0x00,0x8E,0xE3,0x00,0xFC,0xC1,0x01,0xF8,0x00,0x03,0x00,0x00,0x02,
0x0C,0x00,0x00,0x00,0x7C,0x00,0x01,0xFE,0x80,0x01,0xC6,0x01,0x03,0x83,0x01,0x03,0x83,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x06,0x03,0x07,0x8E,0x01,0x02,0xFC,0x01,0x00,0xF8,0x00,0x00,0x00,0x00,
0x0C,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0xFF,0xFF,0x03,0xFF,0xFF,0x03,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,
0x0D,0xFF,0x7F,0x00,0xFF,0xFF,0x00,0x00,0xC0,0x01,0x00,0x80,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x80,0x03,0x00,0xC0,0x01,0xFF,0xFF,0x00,0xFF,0x7F,0x00,
0x0D,0x03,0x00,0x00,0x3F,0x00,0x00,0xFC,0x01,0x00,0xC0,0x0F,0x00,0x00,0x7E,0x00,0x00,0xF0,0x03,0x00,0x80,0x03,0x00,0xF0,0x03,0x00,0x7E,0x00,0xC0,0x0F,0x00,0xFC,0x01,0x00,0x3F,0x00,0x00,0x03,0x00,0x00,
0x0C,0x00,0x00,0x00,0xFF,0xFF,0x03,0xFF,0xFF,0x03,0x00,0xE0,0x03,0x00,0xFC,0x00,0x80,0x0F,0x00,0xC0,0x01,0x00,0x80,0x0F,0x00,0x00,0xFC,0x00,0x00,0xE0,0x03,0xFF,0xFF,0x03,0xFF,0xFF,0x03,0x00,0x00,0x00,
0x0D,0x01,0x00,0x02,0x03,0x80,0x03,0x0E,0xE0,0x01,0x3C,0xF0,0x00,0x70,0x3C,0x00,0xC0,0x0F,0x00,0x80,0x07,0x00,0xC0,0x0F,0x00,0x70,0x3C,0x00,0x3C,0xF0,0x00,0x0E,0xE0,0x01,0x03,0x80,0x03,0x01,0x00,0x02,
0x0D,0x07,0x00,0x00,0x1E,0x00,0x00,0x78,0x00,0x00,0xE0,0x01,0x00,0x80,0x03,0x00,0x00,0xFF,0x03,0x00,0xFF,0x03,0x80,0x03,0x00,0xE0,0x01,0x00,0x78,0x00,0x00,0x1E,0x00,0x00,0x07,0x00,0x00,0x01,0x00,0x00,
0x0C,0x00,0x00,0x00,0x03,0x80,0x03,0x03,0xC0,0x03,0x03,0xF0,0x03,0x03,0x3C,0x03,0x03,0x0F,0x03,0x83,0x07,0x03,0xE3,0x01,0x03,0x73,0x00,0x03,0x3F,0x00,0x03,0x0F,0x00,0x03,0x07,0x00,0x03,0x00,0x00,0x00,
0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x7F,0xFF,0xFF,0x7F,0x03,0x00,0x60,0x03,0x00,0x60,0x03,0x00,0x60,0x03,0x00,0x60,0x03,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0B,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x3F,0x00,0x00,0xF8,0x01,0x00,0xC0,0x0F,0x00,0x00,0x7E,0x00,0x00,0xF0,0x03,0x00,0x80,0x1F,0x00,0x00,0x7C,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,
0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x60,0x03,0x00,0x60,0x03,0x00,0x60,0x03,0x00,0x60,0x03,0x00,0x60,0xFF,0xFF,0x7F,0xFF,0xFF,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0D,0x00,0x01,0x00,0xC0,0x03,0x00,0xE0,0x01,0x00,0xF8,0x00,0x00,0x3E,0x00,0x00,0x0F,0x00,0x00,0x07,0x00,0x00,0x0F,0x00,0x00,0x3E,0x00,0x00,0xF8,0x00,0x00,0xE0,0x01,0x00,0xC0,0x03,0x00,0x00,0x01,0x00,
0x0D,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,
0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x07,0x00,0x00,0x0E,0x00,0x00,0x1C,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0C,0x00,0x00,0x00,0x00,0xF0,0x00,0xE0,0xF8,0x01,0x60,0x98,0x01,0x60,0x0C,0x03,0x60,0x0C,0x03,0x60,0x0C,0x03,0x60,0x0C,0x03,0x60,0x0C,0x03,0xC0,0x0C,0x03,0xC0,0xFF,0x03,0x80,0xFF,0x03,0x00,0x00,0x00,
0x0D,0x00,0x00,0x00,0xFF,0xFF,0x01,0xFF,0xFF,0x03,0xC0,0x00,0x03,0x60,0x00,0x03,0x60,0x00,0x03,0x60,0x00,0x03,0x60,0x00,0x03,0x60,0x00,0x03,0xC0,0x80,0x01,0xC0,0xC1,0x01,0x80,0xFF,0x00,0x00,0x3E,0x00,
0x0D,0x00,0x3E,0x00,0x80,0xFF,0x00,0x80,0xC1,0x01,0xC0,0x80,0x01,0xC0,0x80,0x01,0x60,0x00,0x03,0x60,0x00,0x03,0x60,0x00,0x03,0x60,0x00,0x03,0x60,0x00,0x03,0x60,0x00,0x03,0xE0,0x80,0x03,0x40,0x80,0x01,
0x0C,0x00,0x3E,0x00,0x80,0xFF,0x00,0xC0,0xC1,0x01,0xC0,0x80,0x01,0x60,0x00,0x03,0x60,0x00,0x03,0x60,0x00,0x03,0x60,0x00,0x03,0x60,0x00,0x03,0xC0,0x00,0x03,0xFF,0xFF,0x03,0xFF,0xFF,0x01,0x00,0x00,0x00,
0x0D,0x00,0x3E,0x00,0x80,0xFF,0x00,0xC0,0xCD,0x01,0xC0,0x8C,0x01,0x60,0x8C,0x03,0x60,0x0C,0x03,0x60,0x0C,0x03,0x60,0x0C,0x03,0x60,0x0C,0x03,0xE0,0x0C,0x03,0xC0,0x0C,0x03,0x80,0x8F,0x01,0x00,0x0F,0x00,
0x0D,0x00,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0xFC,0xFF,0x03,0xFE,0xFF,0x03,0x67,0x00,0x00,0x63,0x00,0x00,0x63,0x00,0x00,0x63,0x00,0x00,0x63,0x00,0x00,0x67,0x00,0x00,0x06,0x00,0x00,
0x0C,0x00,0x3E,0x00,0x80,0x7F,0x30,0xC0,0xE1,0x70,0xC0,0xC0,0x61,0x60,0x80,0x61,0x60,0x80,0x61,0x60,0x80,0x61,0x60,0x80,0x61,0x60,0x80,0x71,0x60,0xC0,0x38,0xE0,0xFF,0x3F,0xC0,0xFF,0x0F,0x00,0x00,0x00,
0x0C,0x00,0x00,0x00,0xFF,0xFF,0x03,0xFF,0xFF,0x03,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0xC0,0x01,0x00,0xC0,0xFF,0x03,0x00,0xFF,0x03,0x00,0x00,0x00,
0x0D,0x00,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x67,0x00,0x00,0xE7,0xFF,0x00,0xE7,0xFF,0x01,0x00,0x80,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x80,0x01,
0x0B,0x00,0x00,0x00,0x00,0x00,0x20,0x60,0x00,0x70,0x60,0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x60,0x60,0x00,0x60,0x67,0x00,0x60,0x67,0x00,0x30,0xE7,0xFF,0x3F,0xE0,0xFF,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,
0x0D,0x00,0x00,0x00,0xFF,0xFF,0x03,0xFF,0xFF,0x03,0x00,0x0C,0x00,0x00,0x1E,0x00,0x00,0x1F,0x00,0x00,0x33,0x00,0x80,0x61,0x00,0xC0,0xC0,0x00,0x60,0xC0,0x01,0x20,0x80,0x03,0x20,0x00,0x03,0x00,0x00,0x02,
0x0D,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0xFF,0xFF,0x00,0xFF,0xFF,0x01,0x00,0x80,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x80,0x01,
0x0D,0xE0,0xFF,0x03,0xE0,0xFF,0x03,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0xC0,0x1F,0x00,0xC0,0x1F,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0xC0,0xFF,0x03,0x80,0xFF,0x03,
0x0C,0x00,0x00,0x00,0xC0,0xFF,0x03,0xE0,0xFF,0x03,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0xC0,0x00,0x00,0xC0,0xFF,0x03,0x00,0xFF,0x03,0x00,0x00,0x00,
0x0D,0x00,0x3E,0x00,0x80,0xFF,0x00,0xC0,0xC1,0x01,0xC0,0x80,0x01,0x60,0x00,0x03,0x60,0x00,0x03,0x60,0x00,0x03,0x60,0x00,0x03,0x60,0x00,0x03,0xC0,0x80,0x01,0xC0,0xC1,0x01,0x80,0xFF,0x00,0x00,0x3E,0x00,
0x0D,0x00,0x00,0x00,0xC0,0xFF,0x7F,0xE0,0xFF,0x7F,0x60,0x80,0x01,0x60,0x00,0x03,0x60,0x00,0x03,0x60,0x00,0x03,0x60,0x00,0x03,0x60,0x00,0x03,0xC0,0x80,0x01,0xC0,0xC1,0x01,0x80,0xFF,0x00,0x00,0x3E,0x00,
0x0C,0x00,0x3E,0x00,0x80,0xFF,0x00,0xC0,0xC1,0x01,0xC0,0x80,0x01,0x60,0x00,0x03,0x60,0x00,0x03,0x60,0x00,0x03,0x60,0x00,0x03,0x60,0x00,0x03,0x60,0x80,0x01,0xE0,0xFF,0x7F,0xC0,0xFF,0x7F,0x00,0x00,0x00,
0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0xFF,0x03,0xE0,0xFF,0x03,0xC0,0x01,0x00,0xE0,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x00,
0x0C,0x00,0x00,0x00,0x80,0x83,0x01,0xC0,0x87,0x03,0xE0,0x06,0x03,0x60,0x0C,0x03,0x60,0x0C,0x03,0x60,0x0C,0x03,0x60,0x18,0x03,0x60,0x18,0x03,0xE0,0xB8,0x03,0xE0,0xF0,0x01,0x00,0xE0,0x00,0x00,0x00,0x00,
0x0C,0x00,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00,0xFE,0xFF,0x00,0xFE,0xFF,0x01,0x60,0x80,0x03,0x60,0x00,0x03,0x60,0x00,0x03,0x60,0x00,0x03,0x60,0x00,0x03,0x60,0x80,0x01,0x00,0x00,0x00,
0x0C,0x00,0x00,0x00,0xE0,0x7F,0x00,0xE0,0xFF,0x01,0x00,0xC0,0x01,0x00,0x80,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0xE0,0xFF,0x03,0xE0,0xFF,0x01,0x00,0x00,0x00,
0x0D,0x60,0x00,0x00,0xE0,0x01,0x00,0xC0,0x0F,0x00,0x00,0x3E,0x00,0x00,0xF8,0x00,0x00,0xE0,0x03,0x00,0x80,0x03,0x00,0xE0,0x03,0x00,0xF8,0x00,0x00,0x3E,0x00,0xC0,0x0F,0x00,0xE0,0x01,0x00,0x60,0x00,0x00,
0x0D,0xE0,0x01,0x00,0xE0,0x7F,0x00,0x00,0xFC,0x03,0x00,0xC0,0x03,0x00,0xF0,0x01,0x00,0x3E,0x00,0x00,0x07,0x00,0x00,0x3E,0x00,0x00,0xF0,0x01,0x00,0xC0,0x03,0x00,0xFC,0x03,0xE0,0x7F,0x00,0xE0,0x01,0x00,
0x0D,0x20,0x00,0x02,0x60,0x00,0x03,0xE0,0x80,0x03,0xC0,0xC1,0x00,0x00,0x73,0x00,0x00,0x3E,0x00,0x00,0x1C,0x00,0x00,0x3E,0x00,0x00,0x73,0x00,0xC0,0xC1,0x00,0xE0,0x80,0x03,0x60,0x00,0x03,0x20,0x00,0x02,
0x0D,0x60,0x00,0x60,0xE0,0x01,0x60,0xC0,0x0F,0x60,0x00,0x3E,0x60,0x00,0xF8,0x70,0x00,0xE0,0x39,0x00,0x80,0x1F,0x00,0x80,0x0F,0x00,0xF0,0x03,0x00,0x7E,0x00,0xC0,0x1F,0x00,0xE0,0x03,0x00,0x60,0x00,0x00,
0x0C,0x00,0x00,0x00,0x60,0x00,0x03,0x60,0xC0,0x03,0x60,0xE0,0x03,0x60,0x70,0x03,0x60,0x38,0x03,0x60,0x1C,0x03,0x60,0x06,0x03,0x60,0x03,0x03,0xE0,0x01,0x03,0xE0,0x00,0x03,0x60,0x00,0x03,0x00,0x00,0x00,
0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x00,0x0C,0x00,0x00,0x1E,0x00,0xFC,0xFF,0x1F,0xFE,0xF3,0x3F,0x07,0x00,0x70,0x03,0x00,0x60,0x03,0x00,0x60,0x03,0x00,0x60,0x03,0x00,0x60,0x00,0x00,0x00,
0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x7F,0xFF,0xFF,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0B,0x00,0x00,0x00,0x03,0x00,0x60,0x03,0x00,0x60,0x03,0x00,0x60,0x03,0x00,0x60,0x07,0x00,0x70,0xFE,0xF3,0x3F,0xFC,0xFF,0x1F,0x00,0x1E,0x00,0x00,0x0C,0x00,0x00,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0C,0x00,0x18,0x00,0x00,0x1C,0x00,0x00,0x0E,0x00,0x00,0x06,0x00,0x00,0x06,0x00,0x00,0x0C,0x00,0x00,0x0C,0x00,0x00,0x18,0x00,0x00,0x18,0x00,0x00,0x1C,0x00,0x00,0x0E,0x00,0x00,0x06,0x00,0x00,0x00,0x00,
0x06,0xFF,0xFF,0x01,0x03,0x00,0x01,0x03,0x00,0x01,0x03,0x00,0x01,0xFF,0xFF,0x01,0xFF,0xFF,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
""")

# XGLCD Font Utility ###########################################################
class XglcdFont(object):
    """Font data in X-GLCD format.

    Attributes:
        letters: A bytearray of letters (columns consist of bytes)
        width: Maximum pixel width of font
        height: Pixel height of font
        start_letter: ASCII number of first letter
        height_bytes: How many bytes comprises letter height

    Note:
        Font files can be generated with the free version of MikroElektronika
        GLCD Font Creator:  www.mikroe.com/glcd-font-creator
        The font file must be in X-GLCD 'C' format.
        To save text files from this font creator program in Win7 or higher
        you must use XP compatibility mode or you can just use the clipboard.
    """

    # Dict to tranlate bitwise values to byte position
    BIT_POS = {1: 0, 2: 2, 4: 4, 8: 6, 16: 8, 32: 10, 64: 12, 128: 14, 256: 16}

    def __init__(self, font):
        """Constructor for X-GLCD Font object.

        Args:
            font (list): [width, height, start_letter, letter_count, font_data]
            width (int): Maximum width in pixels of each letter
            height (int): Height in pixels of each letter
            start_letter (int): First ACII letter.  Default is 32.
            letter_count (int): Total number of letters.  Default is 96.
        """
        self.width = font[0]
        self.height = font[1]
        self.start_letter = font[2]
        self.letter_count = font[3]
        self.bytes_per_letter = (floor(
            (self.height - 1) / 8) + 1) * self.width + 1
        self.__load_xglcd_font(font[4])

    def __load_xglcd_font(self, font_data):
        """Load X-GLCD font data from text file.

        Args:
            font_data (string): String containing font data
        """
        bytes_per_letter = self.bytes_per_letter
        # Buffer to hold letter byte values
        self.letters = bytearray(bytes_per_letter * self.letter_count)
        mv = memoryview(self.letters)
        offset = 0
        for line in font_data.split('\n'):
            # Skip lines that do not start with hex values
            line = line.strip()

            if len(line) == 0 or line[0:2] != '0x':
                continue
            # Remove comments
            comment = line.find('//')
            if comment != -1:
                line = line[0:comment].strip()
            # Remove trailing commas
            if line.endswith(','):
                line = line[0:len(line) - 1]
            # Convert hex strings to bytearray and insert in to letters
            mv[offset: offset + bytes_per_letter] = bytearray(
                int(b, 16) for b in line.split(','))
            offset += bytes_per_letter

    def lit_bits(self, n):
        """Return positions of 1 bits only."""
        while n:
            b = n & (~n+1)
            yield self.BIT_POS[b]
            n ^= b

    def get_letter(self, letter, color, background=0):
        """Convert letter byte data to pixels.

        Args:
            letter (string): Letter to return (must exist within font).
            color (int): RGB565 color value.
            background (int): RGB565 background color (default: black).
            landscape (bool): Orientation (default: False = portrait)
        Returns:
            (bytearray): Pixel data.
            (int, int): Letter width and height.
        """
        # Get index of letter
        letter_ord = ord(letter) - self.start_letter
        # Confirm font contains letter - use last letter as fallback
        if letter_ord >= self.letter_count:
            letter_ord = self.letter_count-1

        bytes_per_letter = self.bytes_per_letter
        offset = letter_ord * bytes_per_letter
        mv = memoryview(self.letters[offset:offset + bytes_per_letter])

        # Get width of letter (specified by first byte)
        letter_width = mv[0]
        letter_height = self.height
        # Get size in bytes of specified letter
        letter_size = letter_height * letter_width
        # Create buffer (double size to accommodate 16 bit colors)
        if background:
            buf = bytearray(background * letter_size)
        else:
            buf = bytearray(letter_size * 2)

        msb, lsb = color

        # Populate buffer in order for portrait
        col = 0  # Set column to first column
        bytes_per_letter = ceil(letter_height / 8)
        letter_byte = 0
        # Loop through letter byte data and convert to pixel data
        for b in mv[1:]:
            # Process only colored bits
            segment_size = letter_byte * letter_width * 16
            for bit in self.lit_bits(b):
                pos = (bit * letter_width) + (col * 2) + segment_size
                buf[pos] = msb
                pos = (bit * letter_width) + (col * 2) + 1 + segment_size
                buf[pos] = lsb
            letter_byte += 1
            if letter_byte + 1 > bytes_per_letter:
                col += 1
                letter_byte = 0

        return buf, letter_width, letter_height

    def measure_text(self, text, spacing=1):
        """Measure length of text string in pixels.

        Args:
            text (string): Text string to measure
            spacing (optional int): Pixel spacing between letters.  Default: 1.
        Returns:
            int: length of text
        """
        length = 0
        for letter in text:
            # Get index of letter
            letter_ord = ord(letter) - self.start_letter
            offset = letter_ord * self.bytes_per_letter
            # Add length of letter and spacing
            length += self.letters[offset] + spacing
        return length
